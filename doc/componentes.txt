----------------------------------------------------------

Quando a origem do elemento muda:
- a sua posição continua a mesma
- a sua posição global continua a mesma
- a sua posição de desenho altera (porque é sempre iniciada no canto superior esquerdo)
- a posição de cada filho direto altera
- a posição global de todos os filhos também altera




----------------------------------------------------------



ZINEMOB ACTIVE

Resources
 Images
 Sounds
 Fonts
 Files
Renderables Elements
 Sprites
 Shapes
 Fx
Controllers
Modules
 Custom folder
 Another custom folder
UI - View
 Layouts
 Windows
 Panels
UI - Controllers
Data Bases
Global Variables
Global Constants
Global IDs



----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------
----------------------------------------------------------

WindowsModule

deve ter modo animação: modo que não responde à entrada de dados do usuário e só volta a responder quando
a animação é encerrada

comofas:





pacotes:

view
controller
model.db (DataBaseManager, DataBaseTable, Crud, Dao, Service)


----------------------------------------------------------

ModelHandler

void set(String key, Object object)
void setList(String key, Object[] list)
Object get(String key)
Object[] getList(String key)


----------------------------------------------------------

DB

---------------------------------

class DataBaseManager

// cria e retorna a tabela:
DataBaseTable createTable(String name)

// retorna a tabela já existente para ser manipulada:
DataBaseTable getTable(String name)

void beginTransaction()
void commitTransaction()
void rollbackTransaction()

---------------------------------
class DataBaseTable

//types:
int STRING, INTEGER, BOOLEAN, BYTES, FLOAT, DOUBLE, LONG, CHAR, BYTE

// manipulação de dados salvos / queries:
OperationResult select(Criteria)
OperationResult select()
OperationResult delete(Criteria)
OperationResult delete()
OperationResult set(ValuesMap, Criteria)
OperationResult insert(ValuesMap)

// manipulação da tabela:
DataBaseTable addColumn(String name, int type)
DataBaseTable dropColumn(String name)
DataBaseTable renameColumn(String from, String to)
DataBaseTable alterColumn(String from, String to)
DataBaseTable rename(String to)
void drop()

// exemplo de criação de tabelas:

createTable("PLAYERINFO")
	.addColumn("name", DataBaseTable.STRING)
	.addColumn("maxPoints", DataBaseTable.LONG)
	.addColumn("avatarImage", DataBaseTable.BYTES);


// exemplo de atualização de tabelas:

getTable("PLAYERINFO")
	.addColumn("avatarId", DataBaseTable.INT)
	.renameColumn("maxPoints", "points")
	.dropColumn("avatarImage");

getTable("NOMOREUSEFUL")
	.drop();

---------------------------------

tabela UZINE_DB_INFO
"uzineVersion", String
"dbVersion", int

---------------------------------

interface Crud
OperationResult create(Object model)
OperationResult update(Object model)
OperationResult update(Object model, Criteria)
OperationResult retrieve(Object model)
OperationResult retrieve(Criteria)
OperationResult retrieveAll()
OperationResult delete(Object model)
OperationResult delete(Criteria)
OperationResult deleteAll()
int retrieveRegistersCount()


abstract class Dao implements Crud
Dao(String tableName)
protected ValueMap getDataToCreateOrUpdate(Object)
protected Criteria getCriteriaToCompare(Object)
protected Object retrieveObjectFromResultSet(ResultSet)
protected String[] getOrderByCollumns()

abstract class Service implements Crud
Service(Dao dao)


Criteria
and(String collumnName, Object value)
and(String collumnName, String operator, Object value)
or(String collumnName, Object value)
or(String collumnName, String operator, Object value)



ResultSet
readInt(String collumnName)
readString(String collumnName)
readBoolean(String collumnName)
readData(String collumnName)


OperationResult
Object[] getQueryResult()
boolean errorOccurs()
String getErrorMessage()
String getErrorMessageLanguageKey()


---------------------------------

estrutura do RMS:

1 registro: dados da tabela
2 - n registro: registros salvos na tabela

formato do registro 1:

[nome coluna 1, string][tipo coluna 1, byte][nome coluna 2, string][tipo coluna 2, byte]...[nome coluna n, string][tipo coluna n, byte]


ao manipular a tabela, o registro 1 é armazenado em memória em uma hashtable, onde chave = nome da coluna e valor = tipo da coluna, e também
em um array sequencial, onde em cada posição é armazenado o nome da coluna


















